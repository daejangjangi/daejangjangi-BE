name: CI/CD

on:
  pull_request:
    branches:
      - dev
    types:
      - closed

env:
  DOCKER_IMAGE_NAME: daejangjangi/backend-dev:1.0.0

jobs:
  ci:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Create application-secret.yml
        run: |
          mkdir -p src/main/resources
          echo "${{secrets.SECRET_YML}}" | base64 --decode > src/main/resources/application-secret.yml

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build and test with gradle
        run: ./gradlew clean build

      - name: Set up docker buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to dockerhub
        uses: docker/login-action@v3
        with:
          username: ${{secrets.DOCKERHUB_USERNAME}}
          password: ${{secrets.DOCKERHUB_TOKEN}}

      - name: Build and push docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{env.DOCKER_IMAGE_NAME}}

      - name: slack-notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{job.status}}
          author_name: Github Action Test
          fields: repo, message, commit, author, action, eventName, ref, workflow, job, took
        env:
          SLACK_WEBHOOK_URL: ${{secrets.SLACK_WEBHOOK_URL}}
        if: always()

  cd:
    needs: ci
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST}}
          username: ${{ secrets.EC2_USERNAME}}
          key: ${{secrets.SSH_PRIVATE_KEY}}
          script: |
            set -e
            echo "Starting deployment process"

            echo "Pulling latest Docker image"
            docker pull ${{ env.DOCKER_IMAGE_NAME }}

            echo "Stopping and removing existing containers"
            docker-compose -f docker-compose.yml down

            echo "Starting new containers"
            docker-compose -f docker-compose.yml up -d

            echo "Pruning unused docker images"
            docker image prune -af

            echo "Deployment completed successfully!"

      - name: slack-notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{job.status}}
          author_name: Github Action Test
          fields: repo, message, commit, author, action, eventName, ref, workflow, job, took
        env:
          SLACK_WEBHOOK_URL: ${{secrets.SLACK_WEBHOOK_URL}}
        if: always()